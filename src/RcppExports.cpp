// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// spoa_consensus_character
String spoa_consensus_character(std::vector<std::string> seq, std::string algorithm, std::string gap_algorithm, int match, int mismatch, int gap_open, int gap_extend, int gap_open2, int gap_extend2);
RcppExport SEXP _spoar_spoa_consensus_character(SEXP seqSEXP, SEXP algorithmSEXP, SEXP gap_algorithmSEXP, SEXP matchSEXP, SEXP mismatchSEXP, SEXP gap_openSEXP, SEXP gap_extendSEXP, SEXP gap_open2SEXP, SEXP gap_extend2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type seq(seqSEXP);
    Rcpp::traits::input_parameter< std::string >::type algorithm(algorithmSEXP);
    Rcpp::traits::input_parameter< std::string >::type gap_algorithm(gap_algorithmSEXP);
    Rcpp::traits::input_parameter< int >::type match(matchSEXP);
    Rcpp::traits::input_parameter< int >::type mismatch(mismatchSEXP);
    Rcpp::traits::input_parameter< int >::type gap_open(gap_openSEXP);
    Rcpp::traits::input_parameter< int >::type gap_extend(gap_extendSEXP);
    Rcpp::traits::input_parameter< int >::type gap_open2(gap_open2SEXP);
    Rcpp::traits::input_parameter< int >::type gap_extend2(gap_extend2SEXP);
    rcpp_result_gen = Rcpp::wrap(spoa_consensus_character(seq, algorithm, gap_algorithm, match, mismatch, gap_open, gap_extend, gap_open2, gap_extend2));
    return rcpp_result_gen;
END_RCPP
}
// spoa_align_character
std::vector<std::string> spoa_align_character(std::vector<std::string> seq, std::string algorithm, std::string gap_algorithm, int match, int mismatch, int gap_open, int gap_extend, int gap_open2, int gap_extend2);
RcppExport SEXP _spoar_spoa_align_character(SEXP seqSEXP, SEXP algorithmSEXP, SEXP gap_algorithmSEXP, SEXP matchSEXP, SEXP mismatchSEXP, SEXP gap_openSEXP, SEXP gap_extendSEXP, SEXP gap_open2SEXP, SEXP gap_extend2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type seq(seqSEXP);
    Rcpp::traits::input_parameter< std::string >::type algorithm(algorithmSEXP);
    Rcpp::traits::input_parameter< std::string >::type gap_algorithm(gap_algorithmSEXP);
    Rcpp::traits::input_parameter< int >::type match(matchSEXP);
    Rcpp::traits::input_parameter< int >::type mismatch(mismatchSEXP);
    Rcpp::traits::input_parameter< int >::type gap_open(gap_openSEXP);
    Rcpp::traits::input_parameter< int >::type gap_extend(gap_extendSEXP);
    Rcpp::traits::input_parameter< int >::type gap_open2(gap_open2SEXP);
    Rcpp::traits::input_parameter< int >::type gap_extend2(gap_extend2SEXP);
    rcpp_result_gen = Rcpp::wrap(spoa_align_character(seq, algorithm, gap_algorithm, match, mismatch, gap_open, gap_extend, gap_open2, gap_extend2));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_spoar_spoa_consensus_character", (DL_FUNC) &_spoar_spoa_consensus_character, 9},
    {"_spoar_spoa_align_character", (DL_FUNC) &_spoar_spoa_align_character, 9},
    {NULL, NULL, 0}
};

RcppExport void R_init_spoar(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
