% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spoar.R
\name{spoaAlign}
\alias{spoaAlign}
\alias{spoaConsensus}
\title{Align sequences using SPOA (and optionally get the consensus)}
\usage{
spoaAlign(
  seq,
  match = 5L,
  mismatch = -4L,
  gap_open = -8L,
  gap_extend = -6L,
  gap_open2 = -10L,
  gap_extend2 = -4L,
  algorithm = c("local", "global", "semi.global"),
  gap_algorithm = c("linear", "affine", "convex"),
  both_strands = FALSE,
  ...
)

spoaConsensus(
  seq,
  match = 5L,
  mismatch = -4L,
  gap_open = -8L,
  gap_extend = -6L,
  gap_open2 = -10L,
  gap_extend2 = -4L,
  algorithm = c("local", "global", "semi.global"),
  gap_algorithm = c("linear", "affine", "convex"),
  both_strands = FALSE,
  ...
)
}
\arguments{
\item{seq}{(\code{character} vector or \code{\link[Biostrings:XStringSet-class]{Biostrings::XStringSet}}) sequences
to align}

\item{match}{(non-negative \code{integer}) score for a match ("\code{m}" in SPOA).
\emph{Default}: \code{5L}}

\item{mismatch}{(non-positive \code{integer}) score for a mismatch ("\code{n}" in SPOA)
\emph{Default}: \code{-4L}}

\item{gap_open}{(non-positive \code{integer}) gap opening penalty ("\code{g}" in SPOA).
\emph{Default}: \code{-8L}}

\item{gap_extend}{(non-positive \code{integer}) gap extension penalty ("\code{e}" in
SPOA); valid only for \code{gap_algorithm="affine"} or \code{"convex"}.
\emph{Default}: \code{-6L}}

\item{gap_open2}{(non-positive \code{integer}) second gap opening penalty ("\code{q}"
in SPOA); valid only for \code{gap_algorithm="convex"}. \emph{Default}: \code{-10L}}

\item{gap_extend2}{(non-positive \code{integer}) second gap extension penalty
("\code{c}" in SPOA); valid only for \code{gap_algorithm="convex"}. \emph{Default}: \code{-4L}}

\item{algorithm}{(\code{character} string) alignment mode; one of \code{"local"}
(Smith-Watterman), \code{"global"} (Needleman-Wunsch), or \code{"semi.global"}
(Overlap). \emph{Default}: \code{"local"}}

\item{gap_algorithm}{(\code{character} string) gap scoring algorithm; one of
\code{"linear"}, \code{"affine"}, or \code{"convex"}. \emph{Default}: \code{"linear"}}

\item{both_strands}{(\code{logical}) if \code{TRUE}, try to reverse complement
sequences during alignment. \emph{Default}: \code{FALSE}}

\item{...}{additional parameters passed to methods}
}
\value{
For \code{spoaConsensus()}, either a \code{character} string or the
appropriate \code{\link[Biostrings:XString-class]{Biostrings::XString}}, depending on the class of \code{seq}.

For \code{spoaAlign()}, either a
\code{character} vector or a \code{\link[Biostrings:MultipleAlignment-class]{Biostrings::MultipleAlignment}}, depending on
the class of \code{seq}. If \code{seq} is a \code{BStringSet} (i.e., an \code{XStringSet} which
is not specifically DNA, RNA, or AA) then the result is also a \code{BStringSet},
since there is no corresponding "\code{BMultipleAlignment}" class.
}
\description{
Align sequences using SPOA (and optionally get the consensus)
}
\details{
The gap penalty formulas are:

\code{linear}: \code{g * i}

\code{affine}: \code{g + (i - 1) * e}

\code{convex}: \verb{min(g + (i - i) * e, q + (i - 1) \\cdot c)}
}
\examples{
sequences <- c(
    "CATAAAAGAACGTAGGTCGCCCGTCCGTAACCTGTCGGATCACCGGAAAGGACCCGTAAAGTGATAATGAT",
    "ATAAAGGCAGTCGCTCTGTAAGCTGTCGATTCACCGGAAAGATGGCGTTACCACGTAAAGTGATAATGATTAT",
    "ATCAAAGAACGTGTAGCCTGTCCGTAATCTAGCGCATTTCACACGAGACCCGCGTAATGGG",
    "CGTAAATAGGTAATGATTATCATTACATATCACAACTAGGGCCGTATTAATCATGATATCATCA",
    "GTCGCTAGAGGCATCGTGAGTCGCTTCCGTACCGCAAGGATGACGAGTCACTTAAAGTGATAAT",
    "CCGTAACCTTCATCGGATCACCGGAAAGGACCCGTAAATAGACCTGATTATCATCTACAT"
)
spoaAlign(sequences)
spoaConsensus(sequences)
}
