% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/spoar.R
\name{spoa_align}
\alias{spoa_align}
\alias{spoa_align.character}
\alias{spoa_consensus}
\alias{spoa_consensus.character}
\alias{spoa_consensus.XStringSet}
\title{Align sequences using SPOA (and optionally get the consensus)}
\usage{
spoa_align(
  seq,
  match = 5,
  mismatch = -4,
  gap_open = -8,
  gap_extend = -6,
  gap_open2 = -10,
  gap_extend2 = -4,
  algorithm = c("local", "global", "semi.global"),
  gap_algorithm = c("linear", "affine", "convex"),
  both_strands = FALSE,
  ...
)

\method{spoa_align}{character}(
  seq,
  match = 5,
  mismatch = -4,
  gap_open = -8,
  gap_extend = -6,
  gap_open2 = -10,
  gap_extend2 = -4,
  algorithm = c("local", "global", "semi.global"),
  gap_algorithm = c("linear", "affine", "convex"),
  both_strands = FALSE,
  ...
)

spoa_consensus(
  seq,
  match = 5,
  mismatch = -4,
  gap_open = -8,
  gap_extend = -6,
  gap_open2 = -10,
  gap_extend2 = -4,
  algorithm = c("local", "global", "semi.global"),
  gap_algorithm = c("linear", "affine", "convex"),
  both_strands = FALSE,
  ...
)

\method{spoa_consensus}{character}(
  seq,
  match = 5,
  mismatch = -4,
  gap_open = -8,
  gap_extend = -6,
  gap_open2 = -10,
  gap_extend2 = -4,
  algorithm = c("local", "global", "semi.global"),
  gap_algorithm = c("linear", "affine", "convex"),
  both_strands = FALSE,
  ...
)

\method{spoa_consensus}{XStringSet}(
  seq,
  match = 5,
  mismatch = -4,
  gap_open = -8,
  gap_extend = -6,
  gap_open2 = -10,
  gap_extend2 = -4,
  algorithm = c("local", "global", "semi.global"),
  gap_algorithm = c("linear", "affine", "convex"),
  both_strands = FALSE,
  ...
)
}
\arguments{
\item{seq}{sequences to align}

\item{match}{(non-negative \code{integer}) score for a match ("\code{m}" in SPOA).
\emph{Default}: \code{5L}}

\item{mismatch}{(non-positive \code{integer}) score for a mismatch ("\code{n}" in SPOA)
\emph{Default}: \code{-4L}}

\item{gap_open}{(non-positive \code{integer}) gap opening penalty ("\code{g}" in SPOA).
\emph{Default}: \code{-8L}}

\item{gap_extend}{(non-positive \code{integer}) gap extension penalty ("\code{e}" in
SPOA); valid only for \code{gap_algorithm = "affine"} or \code{"convex"}.
\emph{Default}: \code{-6L}}

\item{gap_open2}{(non-positive \code{integer}) second gap opening penalty ("\code{q}"
in SPOA); valid only for \code{gap_algorithm = "convex"}. \emph{Default}: \code{-10L}}

\item{gap_extend2}{(non-positive \code{integer}) second gap extension penalty
("\code{c}" in SPOA); valid only for \code{gap_algorithm = "convex"}. \emph{Default}: \code{-4L}}

\item{algorithm}{(\code{character} string) alignment mode; one of \code{"local"}
(Smith-Watterman), \code{"global"} (Needleman-Wunsch), or \code{"semi.global"}
(Overlap). \emph{Default}: \code{"local"}}

\item{gap_algorithm}{(\code{character} string) gap scoring algorithm; one of
\code{"linear"}, \code{"affine"}, or \code{"convex"}. \emph{Default}: \code{"linear"}}

\item{both_strands}{(\code{logical}) if \code{TRUE}, try to reverse complement
sequences during alignment. \emph{Default}: \code{FALSE}}

\item{...}{additional parameters passed to methods}
}
\value{
an object of the same type as \code{seq}, giving the aligned sequences.
}
\description{
Align sequences using SPOA (and optionally get the consensus)
}
\details{
The gap penalty formulas are:

\code{linear}: \code{g * i}

\code{affine}: \code{g + (i - 1) * e}

\code{convex}: \verb{min(g + (i - i) * e, q + (i - 1) \\cdot c)}
}
\examples{
sequences <- c(
"CATAAAAGAACGTAGGTCGCCCGTCCGTAACCTGTCGGATCACCGGAAAGGACCCGTAAAGTGATAATGAT",
"ATAAAGGCAGTCGCTCTGTAAGCTGTCGATTCACCGGAAAGATGGCGTTACCACGTAAAGTGATAATGATTAT",
"ATCAAAGAACGTGTAGCCTGTCCGTAATCTAGCGCATTTCACACGAGACCCGCGTAATGGG",
"CGTAAATAGGTAATGATTATCATTACATATCACAACTAGGGCCGTATTAATCATGATATCATCA",
"GTCGCTAGAGGCATCGTGAGTCGCTTCCGTACCGCAAGGATGACGAGTCACTTAAAGTGATAAT",
"CCGTAACCTTCATCGGATCACCGGAAAGGACCCGTAAATAGACCTGATTATCATCTACAT"
)
spoa_align(sequences)
spoa_consensus(sequences)

}
